#!/usr/bin/env python
import sys
import psycopg2

if not any([x for x in sys.path if "orla-lib" in x]):
    sys.path.append("/".join(sys.path[0].split("/")[:-1] + ["/orla-lib/"]))
from steps import step, run
import eutils


@step(prereqs="init", tags="schema")
def database(dbname):
    # # TODO - explain why with conda this host= is needed
    # if 'dbname' not in dsn:
    #     dsn = "dbname={} host=/var/run/postgresql/".format(dsn)
    # # TODO

    dsn = "dbname=postgres"
    with psycopg2.connect(dsn) as dbconn:
        dbconn.set_isolation_level(psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT)
        with dbconn.cursor() as cursor:
            cursor.execute('CREATE DATABASE ' + dbname)


@step(prereqs=".database", tags="schema")
def functions(dbname):
    # Some initial steps
    steps = [
        u"""CREATE OR REPLACE FUNCTION array_sort(anyarray)
                RETURNS anyarray
                LANGUAGE sql IMMUTABLE
            AS $BODY$
                SELECT ARRAY_AGG(val)
                FROM ( SELECT UNNEST($1) AS val ORDER BY 1 ) AS foo;
            $BODY$;""",

        u"""CREATE OR REPLACE FUNCTION array_intersect(anyarray, anyarray)
                  RETURNS anyarray
                  LANGUAGE sql IMMUTABLE
            AS $BODY$
                SELECT ARRAY(
                    SELECT UNNEST($1)
                    INTERSECT
                    SELECT UNNEST($2)
                );
            $BODY$;""",
        u"""CREATE OR REPLACE FUNCTION isnumeric(text)
                RETURNS BOOLEAN
                STRICT LANGUAGE plpgsql IMMUTABLE
            AS $BODY$
                DECLARE x NUMERIC;
                BEGIN
                    x = $1::NUMERIC;
                    RETURN TRUE;
                EXCEPTION WHEN others THEN
                    RETURN FALSE;
                END;
            $BODY$
            ;"""
    ]
    eutils.execute_sqls_serially(dbname, steps)


@step(prereqs=[".functions"], tags="schema")
def tables(dbname):
    # Some initial steps
    steps = [

        u"""CREATE TABLE load_libre (
                "_source_file" TEXT NOT NULL,
                "ID" INTEGER NOT NULL,
                "Time" TEXT NULL,
                "Record Type" INTEGER NULL,
                "Historic Glucose [mmol/L]" DECIMAL NULL,
                "Scan Glucose [mmol/L]" DECIMAL NULL,
                "Non-numeric Rapid-Acting Insulin" DECIMAL NULL,
                "Rapid-Acting Insulin [units]" DECIMAL NULL,
                "Non-numeric Food" DECIMAL NULL,
                "Carbohydrates [grams]" DECIMAL NULL,
                "Non-numeric Long-Acting Insulin" DECIMAL NULL,
                "Long-Acting Insulin [units]" DECIMAL NULL,
                "Notes" TEXT NULL,
                "Strip Glucose [mmol/L]" DECIMAL NULL,
                "Ketone [mmol/L]" DECIMAL NULL,
                "Meal Insulin [units]" DECIMAL NULL,
                "Correction Insulin [units]" DECIMAL NULL,
                "User Change Insulin [units]" DECIMAL NULL,
                "Previous Time" TEXT NULL,
                "Updated Time" TEXT NULL
        );""",

        u"""CREATE TABLE load_twitter (
                "_source_file" TEXT NOT NULL,
                "id" BIGINT NOT NULL,
                "created_at" TEXT NOT NULL,
                "recipient_id" INTEGER NOT NULL,
                "recipient_screen_name" TEXT NOT NULL,
                "sender_id" INTEGER NOT NULL,
                "sender_screen_name" TEXT NOT NULL,
                "text" TEXT
        );""",

        u"""CREATE TABLE load_smartpix_device (
                _source_file TEXT NOT NULL,
                val DECIMAL NULL,
                dt TEXT NOT NULL,
                tm TEXT NOT NULL,
                flg TEXT NULL,
                evt TEXT NULL,
                ins1 TEXT NULL,
                carb DECIMAL NULL,
                d TEXT NULL
        );""",

        u"""CREATE TABLE load_smartpix_basal (
                _source_file TEXT NOT NULL,
                dt TEXT NOT NULL,
                tm TEXT NOT NULL,
                cbrf DECIMAL NOT NULL,
                TBRdec TEXT NULL,
                TBRinc TEXT NULL,
                profile TEXT NULL,
                cmd TEXT NULL,
                "remark" TEXT NULL
        );""",

        u"""CREATE TABLE load_smartpix_bolus (
                _source_file TEXT NOT NULL,
                dt TEXT NOT NULL,
                tm TEXT NOT NULL,
                amount DECIMAL NOT NULL,
                "type" TEXT NULL,
                cmd TEXT NULL,
                remark TEXT NULL
        );""",

        u"""CREATE TABLE load_smartpix_event (
                _source_file TEXT NOT NULL,
                dt TEXT NOT NULL,
                tm TEXT NOT NULL,
                shortinfo TEXT NULL,
                description TEXT NOT NULL
        );"""
    ]
    eutils.execute_sqls_serially(dbname, steps)


if __name__ == "__main__":
    run(locals())
