#!/usr/bin/env python
"""
Transforms the sources selectively to provide a far-more consistent, only required, attributes from the various sources.
"""

import sys
if not any(x for x in sys.path if "orla-lib" in x):
    sys.path.append("/".join(sys.path[0].split("/")[:-1] + ["/orla-lib/"]))

from steps import step, run
import eutils


@step(prereqs=["load.libre"], tags="transform")
def libre(dbname):
    """
    Transforms the libre sources as needed.
    :param dbname:
    :return: None
    """

    sqls = [
        u"""DROP TABLE IF EXISTS transform_libre """,
        u"""
        CREATE TABLE transform_libre AS (
            SELECT DISTINCT
                to_timestamp(extract(epoch FROM "Time"::timestamp
                                                at time zone 'Europe/Berlin')) AS created_at,
                "Historic Glucose [mmol/L]" AS cgm,
                "Scan Glucose [mmol/L]" AS scan
            FROM load_libre
            WHERE
                "Historic Glucose [mmol/L]" IS NOT NULL
            OR "Scan Glucose [mmol/L]" IS NOT NULL
        )"""
    ]
    eutils.execute_sqls_serially(dbname, sqls)


@step(prereqs=["load.twitter"], tags="transform")
def twitter(dbname):
    """
    Transforms the twitter sources as needed.
    :param dbname:
    :return: None
    """
    sqls = [
        u"""DROP TABLE IF EXISTS transform_twitter""",
        u"""
        CREATE TABLE transform_twitter AS (
            SELECT DISTINCT
                CASE isnumeric(created_at)
                    WHEN TRUE THEN to_timestamp(created_at::double precision)
                    ELSE to_timestamp(extract('epoch' FROM created_at::timestamp))
                END AS  created_at,
                text
            FROM load_twitter
        )"""
    ]
    eutils.execute_sqls_serially(dbname, sqls)


@step(prereqs=["load.smartpix"], tags="transform")
def smartpix(dbname):
    """

    :param dbname:
    :return: None
    """
    sqls = [
        u"""DROP TABLE IF EXISTS transform_smartpix_event""",
        u"""DROP TABLE IF EXISTS transform_smartpix_basal""",
        u"""DROP TABLE IF EXISTS transform_smartpix_bolus""",
        u"""DROP TABLE IF EXISTS transform_smartpix_device""",

        u"""
        CREATE TABLE transform_smartpix_event AS (
            SELECT DISTINCT
                to_timestamp(extract('epoch' FROM (dt || ' ' || tm)::timestamp without time zone
                                                   at time zone 'Europe/Berlin')) AS created_at,
                shortinfo,
                description
            FROM load_smartpix_event
            WHERE dt > '2013-01-01'
        )""",
        u"""
        CREATE TABLE transform_smartpix_basal AS (
            SELECT DISTINCT
                to_timestamp(extract('epoch' FROM (dt || ' ' || tm)::timestamp without time zone
                                                   at time zone 'Europe/Berlin')) AS created_at,
                cbrf,
                COALESCE(tbrinc, tbrdec) AS tbr,
                profile,
                cmd,
                remark
            FROM load_smartpix_basal
            WHERE dt > '2013-01-01'
        )""",
        u"""
        CREATE TABLE transform_smartpix_bolus AS (
            SELECT DISTINCT
                to_timestamp(extract('epoch' FROM (dt || ' ' || tm)::timestamp without time zone
                                                   at time zone 'Europe/Berlin')) AS created_at,
                amount,
                "type" AS "type",
                cmd,
                remark
            FROM load_smartpix_bolus
            WHERE dt > '2013-01-01'
        )""",
        u"""
        CREATE TABLE transform_smartpix_device AS (
            SELECT DISTINCT
                to_timestamp(extract('epoch' FROM (dt || ' ' || tm)::timestamp without time zone
                                                   at time zone 'Europe/Berlin')) AS created_at,
                val AS bg,
                carb,
                flg,
                evt,
                ins1,
                d
            FROM load_smartpix_device
            WHERE dt > '2013-01-01'
        )"""
    ]
    eutils.execute_sqls_serially(dbname, sqls)


@step(prereqs=["load.runkeeper"], tags="transform")
def runkeeper(dbname):
    """
    Transforms the twitter sources as needed.
    :param dbname:
    :return: None
    """
    sqls = [
        u"""DROP TABLE IF EXISTS transform_runkeeper""",
        u"""
        CREATE TABLE transform_runkeeper AS (
            SELECT DISTINCT
                uri,
                to_timestamp(created_at) AS created_at,
                "type" as "type",
                total_distance,
                duration
            FROM load_runkeeper
            WHERE total_distance > 1
            AND "type" IN ('Running', 'Cycling')
        )"""
    ]
    eutils.execute_sqls_serially(dbname, sqls)

if __name__ == "__main__":
    run(locals())
